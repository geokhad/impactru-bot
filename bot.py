import os
import asyncio
import random
import datetime
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.constants import ParseMode
from openai import OpenAI

from utils.google_sheets import save_feedback_to_google_sheets
from utils.subscriber_sheet import save_subscriber_to_sheet
from utils.subscriber_stats import get_subscriber_count
from utils.usage_tracker import check_and_increment_usage
from utils.dialog_memory import add_to_dialog, get_dialog, reset_dialog
from scheduler import setup_scheduler

TOKEN = os.environ["TOKEN"]
ALLOWED_USERS = [671003971]
CHANNEL_ID = "@Impactru"

QUOTES = [
    "–ë—É–¥—å —Å–æ–±–æ–π. –ü—Ä–æ—á–∏–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã. ‚Äî –û—Å–∫–∞—Ä –£–∞–π–ª—å–¥",
    "–ï—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å ‚Äî —Ç–æ –∫–æ–≥–¥–∞?",
    "–°–µ–∫—Ä–µ—Ç –≤–ø–µ—Ä—ë–¥ ‚Äî –Ω–∞—á–∞—Ç—å. ‚Äî –ú–∞—Ä–∫ –¢–≤–µ–Ω",
    "–î–µ–ª–∞–π, —á—Ç–æ –º–æ–∂–µ—à—å, —Å —Ç–µ–º, —á—Ç–æ –∏–º–µ–µ—à—å, —Ç–∞–º, –≥–¥–µ —Ç—ã –µ—Å—Ç—å. ‚Äî –¢–µ–æ–¥–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    try:
        save_subscriber_to_sheet(user.id, user.full_name, user.username)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:", e)

    if args:
        if args[0] == "feedback":
            await update.message.reply_text(
    "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/feedback –≤–∞—à —Ç–µ–∫—Å—Ç"
)

            return
        elif args[0] == "share":
            await update.message.reply_text("üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏!")
            return

    await update.message.reply_text("""–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ '–°–≤–æ—è –î–æ—Ä–æ–≥–∞' üòä –ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.""")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
    "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
    "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    "/post <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª\n"
    "/feedback <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–∑—ã–≤\n"
    "/quote ‚Äî —Ü–∏—Ç–∞—Ç–∞ –¥–Ω—è\n"
    "/poll –í–æ–ø—Ä–æ—Å –í–∞—Ä–∏–∞–Ω—Ç1 –í–∞—Ä–∏–∞–Ω—Ç2 [...] ‚Äî –æ–ø—Ä–æ—Å\n"
    "/menu ‚Äî –∫–Ω–æ–ø–∫–∏\n"
    "/ask <–≤–æ–ø—Ä–æ—Å> ‚Äî –∑–∞–¥–∞—Ç—å GPT\n"
    "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
    "/subscribers ‚Äî –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
)

    await update.message.reply_text(help_text)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üö∂ –ù–∞—á–∞—Ç—å –ø—É—Ç—å", url="https://t.me/MyblogPR_bot?start=feedback")],
        [InlineKeyboardButton("üìö –ö–∞–Ω–∞–ª '–°–≤–æ—è –î–æ—Ä–æ–≥–∞'", url="https://t.me/Impactru")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    message = ' '.join(context.args) or "üì£ –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ ‚Äî –±–æ–ª—å—à–æ–µ –¥–µ–ª–æ"
    keyboard = [
        [InlineKeyboardButton("üö∂ –ù–∞—á–∞—Ç—å –ø—É—Ç—å", url="https://t.me/MyblogPR_bot?start=feedback")],
        [InlineKeyboardButton("üìö –ö–∞–Ω–∞–ª '–°–≤–æ—è –î–æ—Ä–æ–≥–∞'", url="https://t.me/Impactru")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
    await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedback_text = ' '.join(context.args)
    if not feedback_text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ /feedback")
        return
    user = update.effective_user
    try:
        save_feedback_to_google_sheets(user.full_name, str(user.id), feedback_text)
    except Exception as e:
        await update.message.reply_text(
    f"‚ùå –û—à–∏–±–∫–∞ Google Sheets:\n{e}"
)

        return
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –¥–ª—è '–°–≤–æ—è –î–æ—Ä–æ–≥–∞'! üôè")

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üß† –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n{random.choice(QUOTES)}")

async def poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /poll –í–æ–ø—Ä–æ—Å –í–∞—Ä–∏–∞–Ω—Ç1 –í–∞—Ä–∏–∞–Ω—Ç2 ...")
        return
    question = args[0]
    options = args[1:]
    await context.bot.send_poll(chat_id=CHANNEL_ID, question=question, options=options, is_anonymous=False)

async def subscribers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    try:
        count = get_subscriber_count()
        await update.message.reply_text(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_dialog(update.effective_user.id)
    await update.message.reply_text("üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = ' '.join(context.args)
    user = update.effective_user

    if not user_input:
        await update.message.reply_text("‚ùì –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask")
        return

    allowed, remaining = check_and_increment_usage(user.id)
    if not allowed:
        await update.message.reply_text("üö´ –õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª–µ–µ 5 GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.")
        return

    await update.message.reply_text(f"üí¨ –û—Å—Ç–∞–ª–æ—Å—å GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {remaining}")
    await update.message.reply_text("üí¨ –î—É–º–∞—é...")

    client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

    try:
        add_to_dialog(user.id, "user", user_input)
        history = get_dialog(user.id)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=history,
            temperature=0.7,
            max_tokens=500,
        )
        answer = response.choices[0].message.content.strip()
        add_to_dialog(user.id, "assistant", answer)
        await update.message.reply_text(answer)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç OpenAI:
{e}")

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CommandHandler("post", post))
app.add_handler(CommandHandler("feedback", feedback))
app.add_handler(CommandHandler("quote", quote))
app.add_handler(CommandHandler("poll", poll))
app.add_handler(CommandHandler("subscribers", subscribers))
app.add_handler(CommandHandler("ask", ask))
app.add_handler(CommandHandler("reset", reset))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Webhook.")

nest_asyncio.apply()

async def main():
    setup_scheduler(app)
    await app.bot.set_webhook("https://impactru-bot.onrender.com")
    await app.run_webhook(
        listen="0.0.0.0",
        port=10000,
        webhook_url="https://impactru-bot.onrender.com"
    )

asyncio.run(main())
